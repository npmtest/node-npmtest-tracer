{"/home/travis/build/npmtest/node-npmtest-tracer/test.js":"/* istanbul instrument in package npmtest_tracer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tracer/lib.npmtest_tracer.js":"/* istanbul instrument in package npmtest_tracer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_tracer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_tracer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-tracer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-tracer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_tracer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_tracer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_tracer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_tracer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_tracer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_tracer.__dirname + '/lib.npmtest_tracer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-tracer/node_modules/tracer/lib/index.js":"\"use strict\";\nexports.console = require('./console');\nexports.colorConsole = require('./color_console');\nexports.dailyfile = require('./dailyfile');\n\n//global settings\nvar settings = require('./settings');\nexports.close = settings.close;\nexports.setLevel = settings.setLevel;\nexports.getLevel = settings.getLevel;\n","/home/travis/build/npmtest/node-npmtest-tracer/node_modules/tracer/lib/console.js":"\"use strict\";\nvar tinytim = require('tinytim'), dateFormat = require('dateformat'), utils = require('./utils'), path = require('path'), settings = require('./settings').settings;\n\nvar noop = function(){};\n\nvar fwrap = function(fn){\n\treturn function(str){ return fn(str) };\n};\n\n// Stack trace format :\n// https://github.com/v8/v8/wiki/Stack%20Trace%20API\nvar stackReg = /at\\s+(.*)\\s+\\((.*):(\\d*):(\\d*)\\)/i;\nvar stackReg2 = /at\\s+()(.*):(\\d*):(\\d*)/i;\n\n// main log method\nfunction logMain(config, level, title, format, filters, needstack, args) {\n\t//check level of global settings\n\tvar gLevel = settings.level;\n\tif (typeof (gLevel) == 'string')\n\t\tgLevel = config.methods.indexOf(gLevel);\n\tif (level < gLevel) { return; }\n\n\tvar data = {\n\t\ttimestamp : dateFormat(new Date(), config.dateformat),\n\t\tmessage : \"\",\n\t\ttitle : title,\n\t\tlevel : level,\n\t\targs : args\n\t};\n\tdata.method = data.path = data.line = data.pos = data.file = '';\n\n\tif (needstack) {\n\t\t// get call stack, and analyze it\n\t\t// get all file,method and line number\n\t\tvar stacklist = (new Error()).stack.split('\\n').slice(3);\n\t\tvar s = stacklist[config.stackIndex] || stacklist[0],\n\t\t\tsp = stackReg.exec(s) || stackReg2.exec(s);\n\t\tif (sp && sp.length === 5) {\n\t\t\tdata.method = sp[1];\n\t\t\tdata.path = sp[2];\n\t\t\tdata.line = sp[3];\n\t\t\tdata.pos = sp[4];\n\t\t\tdata.file = path.basename(data.path);\n\t\t\tdata.stack = stacklist.join('\\n');\n\t\t}\n\t}\n\n\tconfig.preprocess(data);\n\tvar msg = utils.format.apply(config, data.args);\n\tdata.message = msg;\n\n\t// call micro-template to ouput\n\tdata.output = tinytim.tim(format, data);\n\n\t// process every filter method\n\tvar len = filters.length;\n\tfor ( var i = 0; i < len; i += 1) {\n\t\tdata.output = fwrap(filters[i])(data.output);\n\t\tif (!data.output)\n\t\t\treturn data;\n\t\t// cancel next process if return a false(include null, undefined)\n\t}\n\t// trans the final result\n\tconfig.transport.forEach(function(tras) {\n\t\ttras(data);\n\t});\n\treturn data;\n}\n\nmodule.exports = (function() {\n\t// default config\n\tvar _config = {\n\t\tformat : \"{{timestamp}} <{{title}}> {{file}}:{{line}} ({{method}}) {{message}}\",\n\t\tdateformat : \"isoDateTime\",\n\t\tpreprocess : function(data) {\n\t\t},\n\t\ttransport : function(data) {\n\t\t\tconsole.log(data.output);\n\t\t},\n\t\tfilters : [],\n\t\tlevel : 'log',\n\t\tmethods : [ 'log', 'trace', 'debug', 'info', 'warn', 'error' ],\n\t\tstackIndex : 0,\t\t// get the specified index of stack as file information. It is userful for development package.\n\t\tinspectOpt : {\n\t\t\tshowHidden : false, //if true then the object's non-enumerable properties will be shown too. Defaults to false\n\t\t\tdepth : 2 //tells inspect how many times to recurse while formatting the object. This is useful for inspecting large complicated objects. Defaults to 2. To make it recurse indefinitely pass null.\n\t\t}\n\t};\n\n\t// union user's config and default\n\t_config = utils.union(_config, arguments);\n\n\tvar _self = {};\n\n\t_config.format = Array.isArray(_config.format) ? _config.format\n\t\t: [ _config.format ];\n\n\t_config.filters = Array.isArray(_config.filters) ? _config.filters\n\t\t: [ _config.filters ];\n\n\t_config.transport = Array.isArray(_config.transport) ? _config.transport : [_config.transport];\n\n\tvar fLen = _config.filters.length, lastFilter;\n\tif (fLen > 0)\n\t\tif (Object.prototype.toString.call(_config.filters[--fLen]) != '[object Function]') {\n\t\t\tlastFilter = _config.filters[fLen];\n\t\t\t_config.filters = _config.filters.slice(0, fLen);\n\t\t}\n\n\tif (typeof (_config.level) == 'string')\n\t\t_config.level = _config.methods.indexOf(_config.level);\n\n\t_config.methods.forEach(function(title, i) {\n\t\tif (i < _config.level)\n\t\t\t_self[title] = noop;\n\t\telse {\n\t\t\tvar format = _config.format[0];\n\t\t\tif (_config.format.length === 2 && _config.format[1][title])\n\t\t\t\tformat = _config.format[1][title];\n\t\t\tvar needstack = /{{(method|path|line|pos|file)}}/i.test(format);\n\n\t\t\tvar filters;\n\t\t\tif (lastFilter && lastFilter[title])\n\t\t\t\tfilters = Array.isArray(lastFilter[title]) ? lastFilter[title]\n\t\t\t\t\t: [ lastFilter[title] ];\n\t\t\telse\n\t\t\t\tfilters = _config.filters;\n\n\t\t\t// interface\n\t\t\t_self[title] = function() {\n\t\t\t\treturn logMain(_config, i, title, format, filters, needstack, arguments);\n\t\t\t};\n\t\t}\n\t});\n\n\treturn _self;\n});","/home/travis/build/npmtest/node-npmtest-tracer/node_modules/tracer/lib/utils.js":"\"use strict\";\nexports.union = function(obj, args) {\n\tfor (var i = 0, len = args.length; i < len; i += 1) {\n\t\tvar source = args[i];\n\t\tfor ( var prop in source) {\n\t\t\tobj[prop] = source[prop];\n\t\t}\n\t}\n\treturn obj;\n};\n\nvar formatRegExp = /%[sdjt]/g;\nvar util = require('util');\nexports.format = function(f) {\n\tvar inspectOpt = this.inspectOpt;\n\tvar args = arguments;\n\tvar i = 0;\n\n\tif (typeof f !== 'string') {\n\t\tvar objects = [];\n\t\tfor (; i < args.length; i++) {\n\t\t\tobjects.push(util.inspect(args[i], inspectOpt));\n\t\t}\n\t\treturn objects.join(' ');\n\t}\n\n\ti = 1;\n\tvar str = String(f).replace(formatRegExp, function(x) {\n\t\tswitch (x) {\n\t\tcase '%s':\n\t\t\treturn String(args[i++]);\n\t\tcase '%d':\n\t\t\treturn Number(args[i++]);\n\t\tcase '%j':\n\t\t\ttry {\n\t\t\t    if (args[i] instanceof Error) {\n\t\t\t\treturn JSON.stringify(args[i++], ['message', 'stack', 'type', 'name']);\n        \t\t    } else {\n            \t\t\treturn JSON.stringify(args[i++]);\n        \t\t    }\n\t\t\t} catch(e) {\n\t\t\t\treturn '[Circular]';\n\t\t\t}\n\t\tcase '%t':\n\t\t\treturn util.inspect(args[i++], inspectOpt);\n\t\tdefault:\n\t\t\treturn x;\n\t\t}\n\t});\n\tfor ( var len = args.length, x = args[i]; i < len; x = args[++i]) {\n\t\tif (x === null || typeof x !== 'object') {\n\t\t\tstr += ' ' + x;\n\t\t} else {\n\t\t\tstr += ' ' + util.inspect(x, inspectOpt);\n\t\t}\n\t}\n\treturn str;\n};\n","/home/travis/build/npmtest/node-npmtest-tracer/node_modules/tracer/lib/settings.js":"\"use strict\";\nvar settings = {\n\tlevel : undefined\n}\n\n//end all of output\nvar close = function(){\n\tsettings.level = Number.MAX_VALUE;\n}\n\n//dynamically change the log level, all of output\nvar setLevel = function(level){\n\tsettings.level = level;\n}\n\n//get the current log level\nvar getLevel = function(){\n\treturn settings.level;\n}\n\n\nexports.settings = settings;\nexports.close = close;\nexports.setLevel = setLevel;\nexports.getLevel = getLevel;\n","/home/travis/build/npmtest/node-npmtest-tracer/node_modules/tracer/lib/color_console.js":"\"use strict\";\nvar colors = require('colors/safe');\nmodule.exports = function(conf) {\n\treturn require('./console')({\n\t\tfilters : {\n\t\t\t//log : do nothing\n\t\t\ttrace : colors.magenta,\n\t\t\tdebug : colors.cyan,\n\t\t\tinfo : colors.green,\n\t\t\twarn : colors.yellow,\n\t\t\terror : colors.red.bold\n\t\t}\n\t}, conf);\n};\n","/home/travis/build/npmtest/node-npmtest-tracer/node_modules/tracer/lib/dailyfile.js":"\"use strict\";\nvar fs = require('fs'), dateFormat = require('dateformat'), tinytim = require('tinytim'), utils = require('./utils'), spawn = require('child_process').spawn, spawnSync = require('child_process').spawnSync;\nvar path = require('path');\n\nmodule.exports = function (conf) {\n    var _conf = {\n        root: '.',\n        logPathFormat: '{{root}}/{{prefix}}.{{date}}.log',\n        splitFormat: 'yyyymmdd',\n        allLogsFileName: false,\n        maxLogFiles: 10\n    };\n\n    _conf = utils.union(_conf, [conf]);\n\n    function LogFile(prefix, date) {\n        this.date = date;\n        this.path = tinytim.tim(_conf.logPathFormat, {root: _conf.root, prefix: prefix, date: date});\n        spawnSync('mkdir', ['-p', _conf.root]);\n        this.stream = fs.createWriteStream(this.path, {\n            flags: \"a\",\n            encoding: \"utf8\",\n            mode: parseInt('0644', 8)\n            // When engines node >= 4.0.0, following notation will be better:\n            //mode: 0o644\n        });\n    }\n\n    LogFile.prototype.write = function (str) {\n        this.stream.write(str + \"\\n\");\n    };\n\n    LogFile.prototype.destroy = function () {\n        if (this.stream) {\n            this.stream.end();\n            this.stream.destroySoon();\n            this.stream = null;\n        }\n    };\n\n    var _logMap = {};\n\n    function _push2File(str, title) {\n        var logFile = _logMap[title], now = dateFormat(new Date(), _conf.splitFormat);\n        if (logFile && logFile.date != now) {\n            logFile.destroy();\n            logFile = null;\n        }\n        if (!logFile) {\n            logFile = _logMap[title] = new LogFile(title, now);\n            spawn('find', [_conf.root, '-type', 'f', '-name', '*.log', '-mtime', '+' + _conf.maxLogFiles, '-exec', 'rm', '{}', '\\;']);\n        }\n        logFile.write(str);\n        if (_conf.allLogsFileName) {\n            var allLogFile = _logMap.allLogFile, now = dateFormat(new Date(), _conf.splitFormat);\n            if (allLogFile && allLogFile.date != now) {\n                allLogFile.destroy();\n                allLogFile = null;\n            }\n            if (!allLogFile) {\n                allLogFile = _logMap.allLogFile = new LogFile(_conf.allLogsFileName, now);\n                spawn('find', ['./', '-type', 'f', '-name', '*.log', '-mtime', '+' + _conf.maxLogFiles, '-exec', 'rm', '{}', '\\;']);\n            }\n            allLogFile.write(str);\n        }\n    }\n\n    function dailyFileTransport(data) {\n        _push2File(data.output, data.title);\n    }\n\n    if (conf.transport) {\n        conf.transport = Array.isArray(conf.transport) ? conf.transport : [conf.transport];\n        conf.transport.push(dailyFileTransport)\n    } else {\n        conf.transport = [dailyFileTransport];\n    }\n    return require('./console')(conf);\n};"}